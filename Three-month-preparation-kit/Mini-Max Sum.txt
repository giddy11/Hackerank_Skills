List<int> arr = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(arrTemp => Convert.ToInt32(arrTemp)).ToList();

Result.miniMaxSum(arr);


class Result
{

    /*
     * Complete the 'miniMaxSum' function below.
     *
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    //public static void miniMaxSum(List<int> arr)
    //{
    //    long count = 0;
    //    var box1 = new List<long>();

    //    for (int i = 0; i < arr.Count; i++)
    //    {
    //        for (int j = 0; j < arr.Count; j++)
    //        {
    //            if (j == i)
    //                continue;

    //            count += arr[j];
    //        }
    //        box1.Add(count);
    //        count = 0;
    //    }

    //    long min = box1.Min();
    //    long max = box1.Max();

    //    Console.WriteLine($"{min} {max}");
    //}

    public static void miniMaxSum(List<int> arr)
    {
        long totalSum = 0;
        long minElement = long.MaxValue;
        long maxElement = long.MinValue;

        foreach (int element in arr)
        {
            totalSum += element;

            if (element < minElement)
                minElement = element;

            if (element > maxElement)
                maxElement = element;
        }

        long minSum = totalSum - maxElement;
        long maxSum = totalSum - minElement;

        Console.WriteLine($"{minSum} {maxSum}");
    }

}

/*
 * Time Complexity:
 * The outer loop runs arr.Count times, and for each iteration of the outer loop,
 * the inner loop also runs arr.Count times. This results in a time complexity of
 * O(n^2), where n is the size of the input list arr.
 * 
 * Space Complexity:
 * The space complexity is determined by the additional space used in the function.
 * In this case, the primary contributor to space complexity is the box1 list.
 * The box1 list stores the sums of elements for each iteration of the outer loop.
 * Its size will be equal to the size of the input list arr, resulting in a space complexity
 * of O(n), where n is the size of the input list.
 * 
 * Summary:
 * Time Complexity: O(n^2) due to the nested loops.
 * Space Complexity: O(n) due to the additional space used to store sums in the box1 list.
 * 
 * 
 * OPTIMIZATION CODE
 * Time Complexity:
 * The time complexity of this optimized code is O(n), where n is the size of the input list arr.
 * The function iterates through the list once to calculate the total sum, minimum element, and maximum
 * element. The loop runs in linear time, and the subsequent calculations are constant time operations within
 * the loop.
 * 
 * Space Complexity:
 * The space complexity is O(1), constant space. The function uses a fixed number of variables
 * (totalSum, minElement, maxElement, minSum, and maxSum) regardless of the size of the input list.
 * The space required does not grow with the size of the input, making it constant space.
 * 
 * Summary:
 * Time Complexity: O(n) (linear time complexity due to a single pass through the input list).
 * Space Complexity: O(1) (constant space, as the space used remains the same regardless of the input size).
 * 
 * **/